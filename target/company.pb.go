// Code generated by protoc-gen-gogo.
// source: company.proto
// DO NOT EDIT!

/*
Package example is a generated protocol buffer package.

It is generated from these files:
	company.proto

It has these top-level messages:
	Company
*/
package example

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import employee "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type CompanyType int32

const (
	CompanyType_Private   CompanyType = 17
	CompanyType_Public    CompanyType = 18
	CompanyType_NonProfit CompanyType = 19
)

var CompanyType_name = map[int32]string{
	17: "Private",
	18: "Public",
	19: "NonProfit",
}
var CompanyType_value = map[string]int32{
	"Private":   17,
	"Public":    18,
	"NonProfit": 19,
}

func (x CompanyType) Enum() *CompanyType {
	p := new(CompanyType)
	*p = x
	return p
}
func (x CompanyType) String() string {
	return proto.EnumName(CompanyType_name, int32(x))
}
func (x *CompanyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CompanyType_value, data, "CompanyType")
	if err != nil {
		return err
	}
	*x = CompanyType(value)
	return nil
}
func (CompanyType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCompany, []int{0} }

type Company struct {
	Name             *string              `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"`
	Employees        []*employee.Employee `protobuf:"bytes,2,rep,name=Employees" json:"Employees,omitempty"`
	Type             *CompanyType         `protobuf:"varint,3,req,name=Type,enum=example.CompanyType" json:"Type,omitempty"`
	Address          *Company_Address     `protobuf:"group,4,opt,name=Address" json:"address,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Company) Reset()                    { *m = Company{} }
func (m *Company) String() string            { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()               {}
func (*Company) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{0} }

func (m *Company) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Company) GetEmployees() []*employee.Employee {
	if m != nil {
		return m.Employees
	}
	return nil
}

func (m *Company) GetType() CompanyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CompanyType_Private
}

func (m *Company) GetAddress() *Company_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type Company_Address struct {
	Country          *string `protobuf:"bytes,5,req,name=Country" json:"Country,omitempty"`
	City             *string `protobuf:"bytes,6,req,name=City" json:"City,omitempty"`
	Street           *string `protobuf:"bytes,7,opt,name=Street" json:"Street,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Company_Address) Reset()         { *m = Company_Address{} }
func (m *Company_Address) String() string { return proto.CompactTextString(m) }
func (*Company_Address) ProtoMessage()    {}

func (m *Company_Address) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *Company_Address) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *Company_Address) GetStreet() string {
	if m != nil && m.Street != nil {
		return *m.Street
	}
	return ""
}

func init() {
	proto.RegisterType((*Company)(nil), "example.Company")
	proto.RegisterType((*Company_Address)(nil), "example.Company.Address")
	proto.RegisterEnum("example.CompanyType", CompanyType_name, CompanyType_value)
}

var fileDescriptorCompany = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x8e, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0x1b, 0xb3, 0xec, 0xc4, 0xc6, 0x38, 0x7a, 0x18, 0x8a, 0x87, 0xd0, 0x53, 0xf4,
	0xb0, 0x87, 0x80, 0xe0, 0x55, 0x8a, 0xd7, 0x12, 0xd0, 0x17, 0x58, 0xdb, 0x11, 0x02, 0x4d, 0x36,
	0x6c, 0xb6, 0xe2, 0xbe, 0x9c, 0xcf, 0x66, 0x9a, 0xac, 0x20, 0x9e, 0x76, 0x67, 0xfe, 0x8f, 0x7f,
	0x3e, 0x58, 0xed, 0x4d, 0xdb, 0xeb, 0xce, 0xab, 0xde, 0x1a, 0x67, 0x50, 0xf0, 0x97, 0x6e, 0xfb,
	0x23, 0xaf, 0x33, 0x1e, 0x1f, 0xe3, 0x99, 0xe7, 0x60, 0xf3, 0x1d, 0x81, 0xd8, 0xce, 0x28, 0x5e,
	0x42, 0xbc, 0xd3, 0x2d, 0x53, 0x54, 0x2c, 0x4a, 0x89, 0x77, 0x20, 0x5f, 0x02, 0x3b, 0xd0, 0xa2,
	0x58, 0x96, 0x69, 0x25, 0xd5, 0xef, 0x06, 0x37, 0x10, 0xbf, 0xf9, 0x9e, 0x69, 0x39, 0xb2, 0x59,
	0x75, 0xab, 0x42, 0xbf, 0x0a, 0x5d, 0xe7, 0x0c, 0xef, 0x41, 0xe8, 0xc3, 0xc1, 0xf2, 0x30, 0x50,
	0x5c, 0x44, 0x25, 0x54, 0xf4, 0x1f, 0x53, 0xcf, 0x73, 0xbe, 0x7e, 0x02, 0x11, 0xbe, 0x78, 0x75,
	0x16, 0x3a, 0x75, 0xce, 0x7a, 0xba, 0x98, 0x44, 0x46, 0xad, 0x6d, 0xe3, 0x3c, 0x25, 0xd3, 0x94,
	0x41, 0xf2, 0xea, 0x2c, 0xb3, 0x23, 0x31, 0x76, 0xca, 0x87, 0x47, 0x48, 0xff, 0xde, 0x4c, 0x41,
	0xd4, 0xb6, 0xf9, 0xd4, 0x8e, 0xf3, 0x6b, 0x04, 0x48, 0xea, 0xd3, 0xfb, 0xb1, 0xd9, 0xe7, 0x88,
	0x2b, 0x90, 0x3b, 0xd3, 0xd5, 0xd6, 0x7c, 0x34, 0x2e, 0xbf, 0xf9, 0x09, 0x00, 0x00, 0xff, 0xff,
	0xe4, 0x0a, 0xf6, 0x6d, 0x20, 0x01, 0x00, 0x00,
}
